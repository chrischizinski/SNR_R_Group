out_party<-poLCA(f.party, election, nclass = 6,nrep = 20, verbose = FALSE)
out_party<-poLCA(f.party, election, nclass = 6,nrep = 20, verbose = TRUE)
out_party
for(i in 2:classes){
print(i)
foo<-poLCA(f.party, election, nclass = i,verbose = FALSE)
fit.stor$classes[i - 1] <- i
fit.stor$llik[i - 1] <- foo$llik
fit.stor$aic[i - 1] <- foo$aic
fit.stor$bic[i - 1] <- foo$bic
# fit.stor$E[i - 1] <- poLCA.entropy(foo)
}
fit.stor<-fit.stor[order(fit.stor$bic),]
fit.stor$delta_bic <- fit.stor$bic- fit.stor$bic[1]
fit.stor
foo<-poLCA(f.party, election, nclass = i,nrep = 5,verbose = FALSE)
for(i in 2:classes){
print(i)
foo<-poLCA(f.party, election, nclass = i,nrep = 5,verbose = FALSE)
fit.stor$classes[i - 1] <- i
fit.stor$llik[i - 1] <- foo$llik
fit.stor$aic[i - 1] <- foo$aic
fit.stor$bic[i - 1] <- foo$bic
# fit.stor$E[i - 1] <- poLCA.entropy(foo)
}
fit.stor<-fit.stor[order(fit.stor$bic),]
fit.stor$delta_bic <- fit.stor$bic- fit.stor$bic[1]
fit.stor
fit.stor<-fit.stor[order(fit.stor$bic),]
fit.stor
classes <- 10
fit.stor <- data.frame(matrix(NA, classes-1,4))
names(fit.stor) <- c("classes", "llik", "aic", "bic")
for(i in 2:classes){
print(i)
foo<-poLCA(f.party, election, nclass = i,nrep = 5,verbose = FALSE)
fit.stor$classes[i - 1] <- i
fit.stor$llik[i - 1] <- foo$llik
fit.stor$aic[i - 1] <- foo$aic
fit.stor$bic[i - 1] <- foo$bic
# fit.stor$E[i - 1] <- poLCA.entropy(foo)
}
fit.stor<-fit.stor[order(fit.stor$bic),]
fit.stor$delta_bic <- fit.stor$bic- fit.stor$bic[1]
fit.stor
classes <- 10
fit.stor <- data.frame(matrix(NA, classes-1,4))
names(fit.stor) <- c("classes", "llik", "aic", "bic")
for(i in 2:classes){
print(i)
foo<-poLCA(f.party, election, nclass = i,nrep = 10,verbose = FALSE)
fit.stor$classes[i - 1] <- i
fit.stor$llik[i - 1] <- foo$llik
fit.stor$aic[i - 1] <- foo$aic
fit.stor$bic[i - 1] <- foo$bic
# fit.stor$E[i - 1] <- poLCA.entropy(foo)
}
for(i in 2:classes){
print(i)
foo<-poLCA(f.party, election, nclass = i,nrep = 10,verbose = FALSE)
fit.stor$classes[i - 1] <- i
fit.stor$llik[i - 1] <- foo$llik
fit.stor$aic[i - 1] <- foo$aic
fit.stor$bic[i - 1] <- foo$bic
# fit.stor$E[i - 1] <- poLCA.entropy(foo)
}
for(i in 2:classes){
print(i)
foo<-poLCA(f.party, election, nclass = i,nrep = 12,verbose = FALSE)
fit.stor$classes[i - 1] <- i
fit.stor$llik[i - 1] <- foo$llik
fit.stor$aic[i - 1] <- foo$aic
fit.stor$bic[i - 1] <- foo$bic
# fit.stor$E[i - 1] <- poLCA.entropy(foo)
}
foo<-poLCA(f.party, election, nclass = i,nrep = 5,verbose = FALSE)
for(i in 2:classes){
print(i)
foo<-poLCA(f.party, election, nclass = i,nrep = 5,verbose = FALSE)
fit.stor$classes[i - 1] <- i
fit.stor$llik[i - 1] <- foo$llik
fit.stor$aic[i - 1] <- foo$aic
fit.stor$bic[i - 1] <- foo$bic
# fit.stor$E[i - 1] <- poLCA.entropy(foo)
}
set.seed(12345)
classes <- 10
fit.stor <- data.frame(matrix(NA, classes-1,4))
names(fit.stor) <- c("classes", "llik", "aic", "bic")
for(i in 2:classes){
print(i)
foo<-poLCA(f.party, election, nclass = i,nrep = 5,verbose = FALSE)
fit.stor$classes[i - 1] <- i
fit.stor$llik[i - 1] <- foo$llik
fit.stor$aic[i - 1] <- foo$aic
fit.stor$bic[i - 1] <- foo$bic
# fit.stor$E[i - 1] <- poLCA.entropy(foo)
}
set.seed(12348)
classes <- 10
fit.stor <- data.frame(matrix(NA, classes-1,4))
names(fit.stor) <- c("classes", "llik", "aic", "bic")
for(i in 2:classes){
print(i)
foo<-poLCA(f.party, election, nclass = i,nrep = 5,verbose = FALSE)
fit.stor$classes[i - 1] <- i
fit.stor$llik[i - 1] <- foo$llik
fit.stor$aic[i - 1] <- foo$aic
fit.stor$bic[i - 1] <- foo$bic
# fit.stor$E[i - 1] <- poLCA.entropy(foo)
}
fit.stor<-fit.stor[order(fit.stor$bic),]
fit.stor$delta_bic <- fit.stor$bic- fit.stor$bic[1]
fit.stor
out_party<-poLCA(f.party, election, nclass = 5,nrep = 20, verbose = TRUE)
apply(election,c(1,2), function(x) any(is.na(x)))
apply(election,c(1), function(x) any(is.na(x)))
apply(election,c(2), function(x) any(is.na(x)))
election[c(1:12,17)]
election.rev<-na.omit(election[c(1:12,17)])
out_party<-poLCA(f.party, election.rev, nclass = 5,nrep = 20, verbose = TRUE)
out_party<-poLCA(f.party, election, nclass = 5,nrep = 20, verbose = TRUE)
out_party<-poLCA(f.party, election, nclass = 8,nrep = 20, verbose = TRUE)
out_party<-poLCA(f.party, election.rev, nclass = 8,nrep = 20, verbose = TRUE)
set.seed(12348)
classes <- 10
# apply(election,c(2), function(x) any(is.na(x)))
# election.rev<-na.omit(election[c(1:12,17)])
fit.stor <- data.frame(matrix(NA, classes-1,4))
names(fit.stor) <- c("classes", "llik", "aic", "bic")
for(i in 2:classes){
print(i)
foo<-poLCA(f.party, election.rev, nclass = i,nrep = 10,verbose = FALSE)
fit.stor$classes[i - 1] <- i
fit.stor$llik[i - 1] <- foo$llik
fit.stor$aic[i - 1] <- foo$aic
fit.stor$bic[i - 1] <- foo$bic
# fit.stor$E[i - 1] <- poLCA.entropy(foo)
}
apply(election.rev,c(2), function(x) any(is.na(x)))
fit.stor <- data.frame(matrix(NA, classes-1,4))
names(fit.stor) <- c("classes", "llik", "aic", "bic")
for(i in 2:classes){
print(i)
foo<-poLCA(f.party, election.rev, nclass = i,nrep = 5,verbose = FALSE)
fit.stor$classes[i - 1] <- i
fit.stor$llik[i - 1] <- foo$llik
fit.stor$aic[i - 1] <- foo$aic
fit.stor$bic[i - 1] <- foo$bic
# fit.stor$E[i - 1] <- poLCA.entropy(foo)
}
out_party<-poLCA(f.party, election.rev, nclass = 5,nrep = 20, verbose = TRUE)
out_party$coeff
pidmat <- cbind(1, c(1:7))
exb <- exp(pidmat %*% out_party$coeff)
party_pred.num2<-data.frame(party = 1:7, pred_prob = (cbind(1, exb)/(1 + rowSums(exb))))
party_pred.num2 %>%
gather(class, value, - party)
party_pred.num2 %>%
gather(class, value, - party) %>%
mutate(class = case_when(class == "pred_prob.1" ~ "Class 1",
class == "pred_prob.2" ~ "Class 2",
class == "pred_prob.3" ~ "Class 3",
class == "pred_prob.4" ~ "Class 4",
class == "pred_prob.5" ~ "Class 5")) -> party2_long
ggplot(data = party2_long) +
geom_col(aes(x = as.character(party), y = value, fill = class), position = "dodge", colour = "black") +
labs(y = "Predicted probability", x = "Party affinity", fill = "Latent\nclass") +
theme_classic() +
coord_cartesian(ylim = c(0,1), xlim = c(0.5,7.5), expand = FALSE) +
theme(legend.position = c(0.5, 0.85))
ggplot(data = party2_long) +
geom_col(aes(x = as.character(party), y = value, fill = class), position = "dodge", colour = "black") +
labs(y = "Predicted probability", x = "Party affinity", fill = "Latent\nclass") +
theme_classic() +
coord_cartesian(ylim = c(0,1), xlim = c(0.5,7.5), expand = FALSE) +
facet_wrap(~class) +
theme(legend.position = c(0.5, 0.85))
ggplot(data = party2_long) +
geom_col(aes(x = as.character(party), y = value, fill = class), position = "dodge", colour = "black") +
labs(y = "Predicted probability", x = "Party affinity", fill = "Latent\nclass") +
theme_classic() +
coord_cartesian(ylim = c(0,1), xlim = c(0.5,7.5), expand = FALSE) +
facet_wrap(~class, ncol = 1) +
theme(legend.position = c(0.5, 0.85))
ggplot(data = party2_long) +
geom_col(aes(x = as.character(party), y = value, fill = class), position = "dodge", colour = "black") +
labs(y = "Predicted probability", x = "Party affinity", fill = "Latent\nclass") +
theme_classic() +
coord_cartesian(ylim = c(0,1), xlim = c(0.5,7.5), expand = FALSE) +
facet_wrap(~class, ncol = 1) +
theme(legend.position ="none")
knitr::opts_chunk$set(echo = TRUE, fig.width = 10)
library(poLCA) # poLCA: Polytomous Variable Latent Class Analysis
#library(lavaan) # Latent Variable Analysis
#library(lcca) # Latent Class Causal Analysis
#library(BayesLCA) Bayesian Latent Class Analysis
library(gridExtra)
library(tidyverse)
data(election)
head(election)
election %>%
select(MORALG:INTELG) %>%
gather(type, response, MORALG:INTELG) %>%
mutate(president = "Gore") -> gore_data
election %>%
select(MORALB:INTELB) %>%
gather(type, response, MORALB:INTELB) %>%
mutate(president = "Bush") %>%
rbind(gore_data) %>%
mutate(type = gsub("G", "",type),
type = gsub("B", "",type)) %>%
group_by(president, type,response) %>%
summarise(N = n()) %>%
ggplot() +
geom_col(aes(x = response, y = N, fill = type), color = "black") +
facet_grid(president~type) +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, hjust = 1),
legend.position = "none")
# basic latent class specification
f.1 <- cbind(MORALG, CARESG, KNOWG, LEADG, DISHONG, INTELG, MORALB, CARESB, KNOWB, LEADB, DISHONB, INTELB) ~ 1
nes.basic <- poLCA(f.1, election, nclass = 3, verbose = FALSE)
nes.basic
names(nes.basic)
as.data.frame(nes.basic$probs) %>%
rownames_to_column("class") %>%
gather(type, value,-class) %>%
separate(type, c("type2", "response", "response2"), sep = "[.]", extra = "merge", fill = "right") %>%
mutate(pres = ifelse(substr(type2,nchar(type2),nchar(type2))=="G", "gore", "bush"),
type2 = substr(type2,1,nchar(type2)-1),
class = as.numeric(substr(class,nchar(class)-2,nchar(class)-2)) ,
response2 = factor(as.character(response2), levels = c("Not.too.well","Not.well.at.all","Quite.well", "Extremely.well")))->class_probs
ggplot(class_probs) +
geom_col(aes(x = response2, y = value, fill = pres), colour = "black", position = "dodge") +
facet_grid(type2~class) +
theme_classic()
levels(election$MORALB)
out_table <- poLCA.table(formula = MORALG ~ 1, condition = list(MORALB = 1), lc = nes.basic)
obs<-as.data.frame(as.matrix(table(election$MORALG[election$MORALB== "1 Extremely well"])))
names(obs) <- "obs"
obs$pred <- c(out_table)
obs
head(nes.basic$predclass)
# Log likelihood
nes.basic$llik
# AIC
nes.basic$aic
# BIC
nes.basic$bic
#Entropy
poLCA.entropy(nes.basic)
?poLCA.entropy
nes.basic2 <- poLCA(f.1, election, nclass = 3, verbose = TRUE)
nes.basic2 <- poLCA(f.1, election, nclass = 3, verbose = TRUE, nrep = 10)
probs.start <- nes.basic2$probs.start
new.probs.start <- poLCA.reorder(probs.start, c(2, 3, 1))
nes.basic3 <- poLCA(f.1, election, nclass = 3, probs.start = new.probs.start)
table(election$PARTY)
# latent class regression specification
f.party <- cbind(MORALG, CARESG, KNOWG, LEADG, DISHONG, INTELG, MORALB, CARESB, KNOWB, LEADB, DISHONB, INTELB) ~ PARTY
nes.party <- poLCA(f.party, election, nclass = 3, verbose = FALSE)
nes.party
# Size of each latent class
nes.party$P
nes.party$coeff
pidmat <- cbind(1, c(1:7))
exb <- exp(pidmat %*% nes.party$coeff)
party_pred.num<-data.frame(party = 1:7, pred_prob = (cbind(1, exb)/(1 + rowSums(exb))))
party_pred.num %>%
gather(class, value, - party) %>%
mutate(class = case_when(class == "pred_prob.1" ~ "Class 1",
class == "pred_prob.2" ~ "Class 2",
class == "pred_prob.3" ~ "Class 3")) -> party_long
ggplot(data = party_long) +
geom_col(aes(x = as.character(party), y = value, fill = class), position = "dodge", colour = "black") +
labs(y = "Predicted probability", x = "Party affinity", fill = "Latent\nclass") +
theme_classic() +
coord_cartesian(ylim = c(0,1), xlim = c(0.5,7.5), expand = FALSE) +
theme(legend.position = c(0.5, 0.85))
set.seed(12348)
classes <- 10
# apply(election.rev,c(2), function(x) any(is.na(x)))
# election.rev<-na.omit(election[c(1:12,17)])
fit.stor <- data.frame(matrix(NA, classes-1,4))
names(fit.stor) <- c("classes", "llik", "aic", "bic")
for(i in 2:classes){
print(i)
foo<-poLCA(f.party, election, nclass = i,nrep = 5,verbose = FALSE)
fit.stor$classes[i - 1] <- i
fit.stor$llik[i - 1] <- foo$llik
fit.stor$aic[i - 1] <- foo$aic
fit.stor$bic[i - 1] <- foo$bic
# fit.stor$E[i - 1] <- poLCA.entropy(foo)
}
fit.stor<-fit.stor[order(fit.stor$bic),]
fit.stor$delta_bic <- fit.stor$bic- fit.stor$bic[1]
fit.stor
f.party <- cbind(MORALG, CARESG, KNOWG, LEADG, DISHONG, INTELG, MORALB, CARESB, KNOWB, LEADB, DISHONB, INTELB) ~ PARTY
out_party<-poLCA(f.party, election.rev, nclass = 5,nrep = 20, verbose = TRUE)
out_party<-poLCA(f.party, election.rev, nclass = 5,nrep = 10, verbose = TRUE)
out_party$coeff
pidmat <- cbind(1, c(1:7))
exb <- exp(pidmat %*% out_party$coeff)
party_pred.num2<-data.frame(party = 1:7, pred_prob = (cbind(1, exb)/(1 + rowSums(exb))))
party_pred.num2 %>%
gather(class, value, - party) %>%
mutate(class = case_when(class == "pred_prob.1" ~ "Class 1",
class == "pred_prob.2" ~ "Class 2",
class == "pred_prob.3" ~ "Class 3",
class == "pred_prob.4" ~ "Class 4",
class == "pred_prob.5" ~ "Class 5")) -> party2_long
ggplot(data = party2_long) +
geom_col(aes(x = as.character(party), y = value, fill = class), position = "dodge", colour = "black") +
labs(y = "Predicted probability", x = "Party affinity", fill = "Latent\nclass") +
theme_classic() +
coord_cartesian(ylim = c(0,1), xlim = c(0.5,7.5), expand = FALSE) +
facet_wrap(~class, ncol = 1) +
theme(legend.position ="none")
install.packages("BayesLCA")
library(BayesLCA)
data("Alzheimer")
head(Alzheimer)
?Alzheimer
install.packages("xtabs")
xtabs(Alzheimer)
table(Alzheimer)
head(Alzheimer)
Alzheimer %>%
unite(combo, Hallucination:Affective, sep = "")
Alzheimer %>%
unite(combo, Hallucination:Affective, sep = "") %>%
group_by(combo) %>%
summarize(N = n())
Alzheimer %>%
unite(combo, Hallucination:Affective, sep = "") %>%
group_by(combo) %>%
summarize(N = n()) %>%
arrange(N)
Alzheimer %>%
unite(combo, Hallucination:Affective, sep = "") %>%
group_by(combo) %>%
summarize(N = n()) %>%
arrange(desc(N))
names(Alzheimer)
Alzheimer %>%
unite(combo, Hallucination:Affective, sep = "") %>%
group_by(combo) %>%
summarize(N = n()) %>%
arrange(desc(N))
alz <- data.blca(Alzheimer)
alz
alz.3.em <- blca.em(alz, 3, restarts = 20)
alz.3.em
alz.3.em <- blca.em(alz, 3, restarts = 20, sd = TRUE)
alz.3.em
alz3.boot <- blca.boot(alz, fit = alz.3.em, B = 1000, relabel = TRUE)
glimpse(alz3.boot)
str(alz3.boot)
head(alz3.boot)
alz3.boot
names(alz3.boot)
alz3.boot$itemprob
alz3.boot$classprob
alz3.boot$Z
par(mfrow = c(3, 2))
plot(sj3.boot, which = 3)
plot(alz3.boot, which = 3)
alz3.boot <- blca.boot(alz, fit = alz.3.em, B = 1000, relabel = TRUE)
names(alz3.boot)
alz3.boot[3]
par(mfrow = c(3, 2))
plot(alz3.boot, which = 3)
alz3.boot[3]
alz3.boot[3]
alz3.boot[,3]
?blca.boot
dev.off()
alz3.boot$samples
glimpse(alz3.boot$samples)
alz3.boot$samples$classprob
alz3.boot$samples$itemprob
as.data.frame(alz3.boot$samples$itemprob)
unnest(alz3.boot$samples$itemprob)
library(purr)
install.packages("purr", dependencies = TRUE)
library(purrr)
alz3.boot$samples$itemprob %>%
unnest()
alz3.boot$samples$itemprob %>%
map()
alz3.boot$samples$itemprob %>%
map('df')
alz3.boot$samples$itemprob %>%
map('df') %>%
map_df(tibble::rownames_to_column, 'var', .id = 'name')
alz3.boot$samples$itemprob %>%
do.call(rbind, .)
class(alz3.boot$samples$itemprob)
as.tibble(alz3.boot$samples$itemprob)
as.tibble(alz3.boot$samples$itemprob) %>%
gather(all, value)
?extract
as.tibble(alz3.boot$samples$itemprob) %>%
gather(all, value) %>%
extract(all, class, "[.]")
as.tibble(alz3.boot$samples$itemprob) %>%
gather(all, value) %>%
extract(all, "class", "[.]")
as.tibble(alz3.boot$samples$itemprob) %>%
gather(all, value) %>%
extract(all, "class", "{.}")
as.tibble(alz3.boot$samples$itemprob) %>%
gather(all, value) %>%
extract(all, c("symptom","class"), "[.]")
as.tibble(alz3.boot$samples$itemprob) %>%
gather(all, value) %>%
separate(all, c("symptom","class"), "[.]")
as.tibble(alz3.boot$samples$itemprob) %>%
gather(all, value) %>%
separate(all, c("class","symptom"), "[.]")
as.tibble(alz3.boot$samples$itemprob) %>%
gather(all, value) %>%
separate(all, c("class","symptom"), "[.]") %>%
ggplot() +
geom_density(aes(x = value, fill = class), alpha = 0.35) +
facet_wrap(~symptom)
as.tibble(alz3.boot$samples$itemprob) %>%
gather(all, value) %>%
separate(all, c("class","symptom"), "[.]") %>%
ggplot() +
geom_density(aes(x = value, fill = class), alpha = 0.35)
as.tibble(alz3.boot$samples$itemprob) %>%
gather(all, value) %>%
separate(all, c("class","symptom"), "[.]") %>%
ggplot() +
geom_density(aes(x = value, fill = class), alpha = 0.35) +
facet_wrap(~symptom)
as.tibble(alz3.boot$samples$itemprob) %>%
gather(all, value) %>%
separate(all, c("class","symptom"), "[.]")
as.tibble(alz3.boot$samples$itemprob) %>%
gather(all, value) %>%
separate(all, c("class","symptom"), "[.]") %>%
filter(symptom == "Hallucination") +
ggplot() +
geom_density(aes(x = value, fill = class), alpha = 0.35)
as.tibble(alz3.boot$samples$itemprob) %>%
gather(all, value) %>%
separate(all, c("class","symptom"), "[.]") %>%
filter(symptom == "Hallucination")
as.tibble(alz3.boot$samples$itemprob) %>%
gather(all, value) %>%
separate(all, c("class","symptom"), "[.]") %>%
filter(symptom == "Hallucination") +
ggplot() +
geom_density(aes(x = value, fill = class), alpha = 0.35)
as.tibble(alz3.boot$samples$itemprob) %>%
gather(all, value) %>%
separate(all, c("class","symptom"), "[.]") %>%
filter(symptom == "Hallucination") -> prob_data_for_plot
as.tibble(alz3.boot$samples$itemprob) %>%
gather(all, value) %>%
separate(all, c("class","symptom"), "[.]") %>%
filter(symptom == "Hallucination") -> prob_data_for_plot
ggplot(prob_data_for_plot) +
geom_density(aes(x = value, fill = class), alpha = 0.35)
as.tibble(alz3.boot$samples$itemprob) %>%
gather(all, value) %>%
separate(all, c("class","symptom"), "[.]")  -> prob_data_for_plot
ggplot(prob_data_for_plot) +
geom_density(aes(x = value, fill = class), alpha = 0.35) +
facet_wrap(~symptom)
ggplot(prob_data_for_plot) +
geom_density(aes(x = value, fill = class, group = symptom), alpha = 0.35) +
facet_wrap(~symptom)
ggplot(prob_data_for_plot) +
geom_density(aes(value, fill = class), alpha = 0.35) +
facet_wrap(~symptom)
ggplot(prob_data_for_plot) +
geom_density(aes(value, fill = class), alpha = 0.35)
ggplot(prob_data_for_plot,aes(value,fill = class)) +
geom_density(alpha = 0.35) +
facet_wrap(~symptom)
ggplot(prob_data_for_plot,aes(value,fill = class)) +
geom_density(alpha = 0.35) +
facet_wrap(~symptom, scales = "free")
ggplot(prob_data_for_plot,aes(value,fill = class)) +
geom_density(alpha = 0.35) +
facet_wrap(~symptom, scales = "free", ncol = 2)
ggplot(prob_data_for_plot,aes(value,fill = class)) +
geom_density(alpha = 0.35) +
facet_wrap(~symptom, scales = "free", ncol = 2)  +
theme_classic()
ggplot(prob_data_for_plot,aes(value,fill = class)) +
geom_density(alpha = 0.35) +
facet_wrap(~symptom, scales = "free", ncol = 2)  +
scale_y_continuous(limits = c(0,10)) +
theme_classic()
ggplot(prob_data_for_plot,aes(value,fill = class)) +
geom_density(alpha = 0.35) +
facet_wrap(~symptom, scales = "free", ncol = 2)  +
coord_cartesian(ylim = c(0,10)) +
theme_classic()
ggplot(prob_data_for_plot,aes(value,fill = class)) +
geom_density(alpha = 0.35) +
facet_wrap(~symptom, scales = "free", ncol = 2)  +
theme_classic()
ggplot(prob_data_for_plot,aes(value,fill = class, colour = class)) +
geom_density(alpha = 0.35) +
facet_wrap(~symptom, scales = "free", ncol = 2)  +
theme_classic()
