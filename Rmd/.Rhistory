ld<-loadings(agoal.efa)
loadings<-as.data.frame(ld[,])
lt<- data.frame(indicator = paste("ags",1:12, sep =""),
latent_traits = c("MAP", "MAV", "PAP", "PAV", "MAP","MAV", "MAP", "PAV", "PAP", "PAV", "PAP", "MAV"))
loadings %>%
rownames_to_column("indicator") %>%
left_join(lt) %>%
mutate(indicator = factor(indicator, levels = paste("ags",12:1, sep =""))) %>%
gather(factor, value, -indicator, - latent_traits) %>%
mutate(value2 = ifelse(abs(value) < 0.1, NA,  value),
edge_colour = ifelse(is.na(value2), "white", "black"))-> loadings.long
ggplot(data = loadings.long) +
geom_point(aes(x = factor, y = indicator, fill = value2, shape = latent_traits, colour = edge_colour), size = 8) +
scale_colour_manual(values= c("white" = "white", "black" = "black"), guide = FALSE) +
scale_fill_gradient2(na.value = "white", mid = "blue", high = "red", low = "yellow",limits = c(-1,1.05)) +
scale_shape_manual(values = c("MAP" = 21, "MAV" = 22, "PAP" = 23, "PAV" = 24)) +
labs(fill = "Loading", shape = "Latent\ntrait") +
theme_classic()
SS_loadings<-colSums(loadings*loadings)
SS_loadings
Prop_var <- SS_loadings / nrow(loadings)
Prop_var
Cuml_var <-cumsum(Prop_var)
Cuml_var
psych::fa.parallel(goal_scale, fa="fa", fm="ml")
agoal.efa3<-factanal(~ags1+ags2+ags3+ags4+ags5+ags6+ags7+ags8+ags9+ags10+ags11+ ags12, factors=3, rotation="promax", data = goal_scale)
agoal.efa3
loadings3<-as.data.frame(loadings(agoal.efa3)[,])
loadings3%>%
rownames_to_column("indicator") %>%
left_join(lt) %>%
mutate(indicator = factor(indicator, levels = paste("ags",12:1, sep =""))) %>%
gather(factor, value, -indicator, - latent_traits) %>%
mutate(value2 = ifelse(value < 0.1, NA,  value),
edge_colour = ifelse(is.na(value2), "white", "black"))-> loadings3.long
ggplot(data = loadings3.long) +
geom_point(aes(x = factor, y = indicator, fill = value2, shape = latent_traits, colour = edge_colour), size = 8) +
scale_colour_manual(values= c("white" = "white", "black" = "black"), guide = FALSE) +
scale_fill_gradient2(na.value = "white", mid = "blue", high = "red", low = "yellow",limits = c(-1,1.05)) +
scale_shape_manual(values = c("MAP" = 21, "MAV" = 22, "PAP" = 23, "PAV" = 24)) +
labs(fill = "Loading", shape = "Latent\ntrait") +
theme_classic()
agoal.efa3<-factanal(~ags1+ags2+ags3+ags4+ags5+ags6+ags7+ags8+ags9+ags10+ags11+ ags12, factors=3, rotation="promax", data = goal_scale, scores = "Bartlett")
efa_scores <- agoal.efa3$scores %>% as.data.frame() %>% rownames_to_column("obs") %>% na.omit()
set.seed(1234)
sub_efa_scores <- efa_scores[sample(25, replace = FALSE),]
a<- ggplot(data = sub_efa_scores) +
geom_point(aes(x = Factor1, y = Factor2), colour = "red", alpha = 0.5) +
geom_text_repel(aes(x = Factor1, y = Factor2, label = obs)) +
theme_classic()
b<- ggplot(data = sub_efa_scores) +
geom_point(aes(x = Factor2, y = Factor3), colour = "red", alpha = 0.5) +
geom_text_repel(aes(x = Factor2, y = Factor3, label = obs)) +
theme_classic()
c<- ggplot(data = sub_efa_scores) +
geom_point(aes(x = Factor1, y = Factor3), colour = "red", alpha = 0.5) +
geom_text_repel(aes(x = Factor1, y = Factor3, label = obs)) +
theme_classic()
grid.arrange(a,b,c, ncol = 3)
agoal.efa.4<-fa(goal_scale , nfactors=3, residuals=TRUE, rotate="promax",SMC=TRUE, fm="pa")
agoal.efa.4
corr_plot1<-ggcorr(data = NULL,
cor_matrix = as.data.frame(agoal.efa3$correlation),
palette = "RdGy",
label = TRUE,
label_round = 2,
label_size =4,
label_color = "black")
corr_plot1
goal_scale  %>%
na.omit() %>%
mutate_all(ordered) %>%
as.data.frame()-> goal_ordered
try(factanal(~ags1+ags2+ags3+ags4+ags5+ags6+ags7+ags8+ags9+ags10+ags11+ ags12, factors=3, rotation="promax", data = goal_ordered))
pc_goals<-hetcor(goal_ordered)
corr_plot2<-ggcorr(data = NULL,
cor_matrix = as.data.frame(pc_goals$correlation),
palette = "RdGy",
label = TRUE,
label_round = 2,
label_size =4,
label_color = "black")
grid.arrange(corr_plot1 + labs(title = "Nominal") + theme(plot.title = element_text(hjust = 1, size = 22)),
corr_plot2 + labs(title = "Ordinal") + theme(plot.title = element_text(hjust = 1, size = 22)),
ncol = 2)
agoal.efa.ordered<-fa(r=pc_goals$correlations,
nfactors=3,
residuals=TRUE, rotate="promax",SMC=TRUE, fm="pa")
agoal.efa.ordered
knitr::opts_chunk$set(echo = TRUE, fig.width = 10)
library(poLCA) # poLCA: Polytomous Variable Latent Class Analysis
#library(lavaan) # Latent Variable Analysis
#library(lcca) # Latent Class Causal Analysis
#library(BayesLCA) Bayesian Latent Class Analysis
library(gridExtra)
library(tidyverse)
data(election)
head(election)
election %>%
select(MORALG:INTELG) %>%
gather(type, response, MORALG:INTELG) %>%
mutate(president = "Gore") -> gore_data
election %>%
select(MORALB:INTELB) %>%
gather(type, response, MORALB:INTELB) %>%
mutate(president = "Bush") %>%
rbind(gore_data) %>%
mutate(type = gsub("G", "",type),
type = gsub("B", "",type)) %>%
group_by(president, type,response) %>%
summarise(N = n()) %>%
ggplot() +
geom_col(aes(x = response, y = N, fill = type), color = "black") +
facet_grid(president~type) +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, hjust = 1),
legend.position = "none")
# basic latent class specification
f.1 <- cbind(MORALG, CARESG, KNOWG, LEADG, DISHONG, INTELG, MORALB, CARESB, KNOWB, LEADB, DISHONB, INTELB) ~ 1
nes.basic <- poLCA(f.1, election, nclass = 3, verbose = FALSE)
nes.basic
names(nes.basic)
as.data.frame(nes.basic$probs) %>%
rownames_to_column("class") %>%
gather(type, value,-class) %>%
separate(type, c("type2", "response", "response2"), sep = "[.]", extra = "merge", fill = "right") %>%
mutate(pres = ifelse(substr(type2,nchar(type2),nchar(type2))=="G", "gore", "bush"),
type2 = substr(type2,1,nchar(type2)-1),
class = as.numeric(substr(class,nchar(class)-2,nchar(class)-2)) ,
response2 = factor(as.character(response2), levels = c("Not.too.well","Not.well.at.all","Quite.well", "Extremely.well")))->class_probs
ggplot(class_probs) +
geom_col(aes(x = response2, y = value, fill = pres), colour = "black", position = "dodge") +
facet_grid(type2~class) +
theme_classic()
levels(election$MORALB)
out_table <- poLCA.table(formula = MORALG ~ 1, condition = list(MORALB = 1), lc = nes.basic)
obs<-as.data.frame(as.matrix(table(election$MORALG[election$MORALB== "1 Extremely well"])))
names(obs) <- "obs"
obs$pred <- c(out_table)
obs
head(nes.basic$predclass)
# Log likelihood
nes.basic$llik
# AIC
nes.basic$aic
# BIC
nes.basic$bic
#Entropy
poLCA.entropy(nes.basic)
?poLCA.entropy
nes.basic2 <- poLCA(f.1, election, nclass = 3, verbose = TRUE)
nes.basic2 <- poLCA(f.1, election, nclass = 3, verbose = TRUE, nrep = 10)
probs.start <- nes.basic2$probs.start
new.probs.start <- poLCA.reorder(probs.start, c(2, 3, 1))
nes.basic3 <- poLCA(f.1, election, nclass = 3, probs.start = new.probs.start)
table(election$PARTY)
# latent class regression specification
f.party <- cbind(MORALG, CARESG, KNOWG, LEADG, DISHONG, INTELG, MORALB, CARESB, KNOWB, LEADB, DISHONB, INTELB) ~ PARTY
nes.party <- poLCA(f.party, election, nclass = 3, verbose = FALSE)
nes.party
# Size of each latent class
nes.party$P
nes.party$coeff
pidmat <- cbind(1, c(1:7))
exb <- exp(pidmat %*% nes.party$coeff)
party_pred.num<-data.frame(party = 1:7, pred_prob = (cbind(1, exb)/(1 + rowSums(exb))))
party_pred.num %>%
gather(class, value, - party) %>%
mutate(class = case_when(class == "pred_prob.1" ~ "Class 1",
class == "pred_prob.2" ~ "Class 2",
class == "pred_prob.3" ~ "Class 3")) -> party_long
ggplot(data = party_long) +
geom_col(aes(x = as.character(party), y = value, fill = class), position = "dodge", colour = "black") +
labs(y = "Predicted probability", x = "Party affinity", fill = "Latent\nclass") +
theme_classic() +
coord_cartesian(ylim = c(0,1), xlim = c(0.5,7.5), expand = FALSE) +
theme(legend.position = c(0.5, 0.85))
set.seed(12348)
classes <- 10
# apply(election.rev,c(2), function(x) any(is.na(x)))
# election.rev<-na.omit(election[c(1:12,17)])
fit.stor <- data.frame(matrix(NA, classes-1,4))
names(fit.stor) <- c("classes", "llik", "aic", "bic")
for(i in 2:classes){
print(i)
foo<-poLCA(f.party, election, nclass = i,nrep = 5,verbose = FALSE)
fit.stor$classes[i - 1] <- i
fit.stor$llik[i - 1] <- foo$llik
fit.stor$aic[i - 1] <- foo$aic
fit.stor$bic[i - 1] <- foo$bic
# fit.stor$E[i - 1] <- poLCA.entropy(foo)
}
set.seed(12348)
classes <- 6
fit.stor <- data.frame(matrix(NA, classes-1,4))
names(fit.stor) <- c("classes", "llik", "aic", "bic")
for(i in 2:classes){
print(i)
foo<-poLCA(f.party, election, nclass = i,nrep = 5,verbose = FALSE)
fit.stor$classes[i - 1] <- i
fit.stor$llik[i - 1] <- foo$llik
fit.stor$aic[i - 1] <- foo$aic
fit.stor$bic[i - 1] <- foo$bic
# fit.stor$E[i - 1] <- poLCA.entropy(foo)
}
fit.stor<-fit.stor[order(fit.stor$bic),]
fit.stor$delta_bic <- fit.stor$bic- fit.stor$bic[1]
fit.stor
f.party <- cbind(MORALG, CARESG, KNOWG, LEADG, DISHONG, INTELG, MORALB, CARESB, KNOWB, LEADB, DISHONB, INTELB) ~ PARTY
out_party<-poLCA(f.party, election.rev, nclass = 5,nrep = 10, verbose = TRUE)
out_party<-poLCA(f.party, election, nclass = 5,nrep = 10, na.rm = TRUE,verbose = TRUE)
out_party$coeff
pidmat <- cbind(1, c(1:7))
exb <- exp(pidmat %*% out_party$coeff)
party_pred.num2<-data.frame(party = 1:7, pred_prob = (cbind(1, exb)/(1 + rowSums(exb))))
party_pred.num2 %>%
gather(class, value, - party) %>%
mutate(class = case_when(class == "pred_prob.1" ~ "Class 1",
class == "pred_prob.2" ~ "Class 2",
class == "pred_prob.3" ~ "Class 3",
class == "pred_prob.4" ~ "Class 4",
class == "pred_prob.5" ~ "Class 5")) -> party2_long
ggplot(data = party2_long) +
geom_col(aes(x = as.character(party), y = value, fill = class), position = "dodge", colour = "black") +
labs(y = "Predicted probability", x = "Party affinity", fill = "Latent\nclass") +
theme_classic() +
coord_cartesian(ylim = c(0,1), xlim = c(0.5,7.5), expand = FALSE) +
facet_wrap(~class, ncol = 1) +
theme(legend.position ="none")
data("Alzheimer")
head(Alzheimer)
data("Alzheimer")
#library(lavaan) # Latent Variable Analysis
#library(lcca) # Latent Class Causal Analysis
library(BayesLCA) Bayesian Latent Class Analysis
#library(lavaan) # Latent Variable Analysis
#library(lcca) # Latent Class Causal Analysis
library(BayesLCA) #Bayesian Latent Class Analysis
data("Alzheimer")
head(Alzheimer)
names(Alzheimer)
Alzheimer %>%
unite(combo, Hallucination:Affective, sep = "") %>%
group_by(combo) %>%
summarize(N = n()) %>%
arrange(desc(N))
alz <- data.blca(Alzheimer)
alz
alz.3.em <- blca.em(alz, 3, restarts = 20, sd = TRUE)
alz.3.em
alz3.boot <- blca.boot(alz, fit = alz.3.em, B = 1000, relabel = TRUE)
knitr::opts_chunk$set(echo = TRUE, fig.width = 10)
library(poLCA) # poLCA: Polytomous Variable Latent Class Analysis
#library(lavaan) # Latent Variable Analysis
#library(lcca) # Latent Class Causal Analysis
library(BayesLCA) #Bayesian Latent Class Analysis
library(gridExtra)
library(tidyverse)
data(election)
head(election)
election %>%
select(MORALG:INTELG) %>%
gather(type, response, MORALG:INTELG) %>%
mutate(president = "Gore") -> gore_data
election %>%
select(MORALB:INTELB) %>%
gather(type, response, MORALB:INTELB) %>%
mutate(president = "Bush") %>%
rbind(gore_data) %>%
mutate(type = gsub("G", "",type),
type = gsub("B", "",type)) %>%
group_by(president, type,response) %>%
summarise(N = n()) %>%
ggplot() +
geom_col(aes(x = response, y = N, fill = type), color = "black") +
facet_grid(president~type) +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, hjust = 1),
legend.position = "none")
# basic latent class specification
f.1 <- cbind(MORALG, CARESG, KNOWG, LEADG, DISHONG, INTELG, MORALB, CARESB, KNOWB, LEADB, DISHONB, INTELB) ~ 1
nes.basic <- poLCA(f.1, election, nclass = 3, verbose = FALSE)
nes.basic
names(nes.basic)
as.data.frame(nes.basic$probs) %>%
rownames_to_column("class") %>%
gather(type, value,-class) %>%
separate(type, c("type2", "response", "response2"), sep = "[.]", extra = "merge", fill = "right") %>%
mutate(pres = ifelse(substr(type2,nchar(type2),nchar(type2))=="G", "gore", "bush"),
type2 = substr(type2,1,nchar(type2)-1),
class = as.numeric(substr(class,nchar(class)-2,nchar(class)-2)) ,
response2 = factor(as.character(response2), levels = c("Not.too.well","Not.well.at.all","Quite.well", "Extremely.well")))->class_probs
ggplot(class_probs) +
geom_col(aes(x = response2, y = value, fill = pres), colour = "black", position = "dodge") +
facet_grid(type2~class) +
theme_classic()
levels(election$MORALB)
out_table <- poLCA.table(formula = MORALG ~ 1, condition = list(MORALB = 1), lc = nes.basic)
obs<-as.data.frame(as.matrix(table(election$MORALG[election$MORALB== "1 Extremely well"])))
names(obs) <- "obs"
obs$pred <- c(out_table)
obs
head(nes.basic$predclass)
# Log likelihood
nes.basic$llik
# AIC
nes.basic$aic
# BIC
nes.basic$bic
#Entropy
poLCA.entropy(nes.basic)
?poLCA.entropy
nes.basic2 <- poLCA(f.1, election, nclass = 3, verbose = TRUE)
nes.basic2 <- poLCA(f.1, election, nclass = 3, verbose = TRUE, nrep = 10)
probs.start <- nes.basic2$probs.start
new.probs.start <- poLCA.reorder(probs.start, c(2, 3, 1))
nes.basic3 <- poLCA(f.1, election, nclass = 3, probs.start = new.probs.start)
table(election$PARTY)
# latent class regression specification
f.party <- cbind(MORALG, CARESG, KNOWG, LEADG, DISHONG, INTELG, MORALB, CARESB, KNOWB, LEADB, DISHONB, INTELB) ~ PARTY
nes.party <- poLCA(f.party, election, nclass = 3, verbose = FALSE)
nes.party
# Size of each latent class
nes.party$P
nes.party$coeff
pidmat <- cbind(1, c(1:7))
exb <- exp(pidmat %*% nes.party$coeff)
party_pred.num<-data.frame(party = 1:7, pred_prob = (cbind(1, exb)/(1 + rowSums(exb))))
party_pred.num %>%
gather(class, value, - party) %>%
mutate(class = case_when(class == "pred_prob.1" ~ "Class 1",
class == "pred_prob.2" ~ "Class 2",
class == "pred_prob.3" ~ "Class 3")) -> party_long
ggplot(data = party_long) +
geom_col(aes(x = as.character(party), y = value, fill = class), position = "dodge", colour = "black") +
labs(y = "Predicted probability", x = "Party affinity", fill = "Latent\nclass") +
theme_classic() +
coord_cartesian(ylim = c(0,1), xlim = c(0.5,7.5), expand = FALSE) +
theme(legend.position = c(0.5, 0.85))
set.seed(12348)
classes <- 6
# apply(election.rev,c(2), function(x) any(is.na(x)))
# election.rev<-na.omit(election[c(1:12,17)])
fit.stor <- data.frame(matrix(NA, classes-1,4))
names(fit.stor) <- c("classes", "llik", "aic", "bic")
for(i in 2:classes){
print(i)
foo<-poLCA(f.party, election, nclass = i,nrep = 5,verbose = FALSE)
fit.stor$classes[i - 1] <- i
fit.stor$llik[i - 1] <- foo$llik
fit.stor$aic[i - 1] <- foo$aic
fit.stor$bic[i - 1] <- foo$bic
# fit.stor$E[i - 1] <- poLCA.entropy(foo)
}
fit.stor<-fit.stor[order(fit.stor$bic),]
fit.stor$delta_bic <- fit.stor$bic- fit.stor$bic[1]
fit.stor
f.party <- cbind(MORALG, CARESG, KNOWG, LEADG, DISHONG, INTELG, MORALB, CARESB, KNOWB, LEADB, DISHONB, INTELB) ~ PARTY
out_party<-poLCA(f.party, election, nclass = 5,nrep = 10, na.rm = TRUE,verbose = TRUE)
out_party
out_party$coeff
pidmat <- cbind(1, c(1:7))
exb <- exp(pidmat %*% out_party$coeff)
party_pred.num2<-data.frame(party = 1:7, pred_prob = (cbind(1, exb)/(1 + rowSums(exb))))
party_pred.num2 %>%
gather(class, value, - party) %>%
mutate(class = case_when(class == "pred_prob.1" ~ "Class 1",
class == "pred_prob.2" ~ "Class 2",
class == "pred_prob.3" ~ "Class 3",
class == "pred_prob.4" ~ "Class 4",
class == "pred_prob.5" ~ "Class 5")) -> party2_long
ggplot(data = party2_long) +
geom_col(aes(x = as.character(party), y = value, fill = class), position = "dodge", colour = "black") +
labs(y = "Predicted probability", x = "Party affinity", fill = "Latent\nclass") +
theme_classic() +
coord_cartesian(ylim = c(0,1), xlim = c(0.5,7.5), expand = FALSE) +
facet_wrap(~class, ncol = 1) +
theme(legend.position ="none")
data("Alzheimer")
head(Alzheimer)
names(Alzheimer)
# "Hallucination","Activity","Aggression" ,"Agitation","Diurnal","Affective"
Alzheimer %>%
unite(combo, Hallucination:Affective, sep = "") %>%
group_by(combo) %>%
summarize(N = n()) %>%
arrange(desc(N))
alz <- data.blca(Alzheimer)
alz
alz.3.em <- blca.em(alz, 3, restarts = 20, sd = TRUE)
alz.3.em
alz3.boot <- blca.boot(alz, fit = alz.3.em, B = 1000, relabel = TRUE)
names(alz3.boot)
as.tibble(alz3.boot$samples$itemprob) %>%
gather(all, value) %>%
separate(all, c("class","symptom"), "[.]")  -> prob_data_for_plot
ggplot(prob_data_for_plot,aes(value,fill = class, colour = class)) +
geom_density(alpha = 0.35) +
facet_wrap(~symptom, scales = "free", ncol = 2)  +
theme_classic()
KnitPost <- function(input, base.url = "/SNR_R_Group/") {
require(knitr)
opts_knit$set(base.url = base.url)
fig.path <- paste0("figs/", sub(".Rmd$", "", basename(input)), "/")
opts_chunk$set(fig.path = fig.path)
render_jekyll()
knit(input, envir = parent.frame())
}
setwd("/Users/cchizinski2/Documents/github/SNR_R_Group/master/Rmd/")
KnitPost("2017-10-13-LatentVariables.Rmd")
KnitPost("2017-11-31-GroupDifferences.Rmd")
knitr::opts_chunk$set(echo = TRUE)
library(psych)
library(GGally)
library(ggrepel)
library(gridExtra)
library(polycor)
library(poLCA)
library(tidyverse)
goal_scale <- read_csv("https://raw.githubusercontent.com/chrischizinski/SNR_R_Group/master/data/goal_scale.csv")
head(goal_scale)
agoal.efa<-factanal(~ags1+ags2+ags3+ags4+ags5+ags6+ags7+ags8+ags9+ags10+ags11+ ags12, factors=4, rotation="promax", data = goal_scale )
agoal.efa
ld<-loadings(agoal.efa)
loadings<-as.data.frame(ld[,])
lt<- data.frame(indicator = paste("ags",1:12, sep =""),
latent_traits = c("MAP", "MAV", "PAP", "PAV", "MAP","MAV", "MAP", "PAV", "PAP", "PAV", "PAP", "MAV"))
loadings %>%
rownames_to_column("indicator") %>%
left_join(lt) %>%
mutate(indicator = factor(indicator, levels = paste("ags",12:1, sep =""))) %>%
gather(factor, value, -indicator, - latent_traits) %>%
mutate(value2 = ifelse(abs(value) < 0.1, NA,  value),
edge_colour = ifelse(is.na(value2), "white", "black"))-> loadings.long
ggplot(data = loadings.long) +
geom_point(aes(x = factor, y = indicator, fill = value2, shape = latent_traits, colour = edge_colour), size = 8) +
scale_colour_manual(values= c("white" = "white", "black" = "black"), guide = FALSE) +
scale_fill_gradient2(na.value = "white", mid = "blue", high = "red", low = "yellow",limits = c(-1,1.05)) +
scale_shape_manual(values = c("MAP" = 21, "MAV" = 22, "PAP" = 23, "PAV" = 24)) +
labs(fill = "Loading", shape = "Latent\ntrait") +
theme_classic()
SS_loadings<-colSums(loadings*loadings)
SS_loadings
Prop_var <- SS_loadings / nrow(loadings)
Prop_var
Cuml_var <-cumsum(Prop_var)
Cuml_var
psych::fa.parallel(goal_scale, fa="fa", fm="ml")
agoal.efa3<-factanal(~ags1+ags2+ags3+ags4+ags5+ags6+ags7+ags8+ags9+ags10+ags11+ ags12, factors=3, rotation="promax", data = goal_scale)
agoal.efa3
loadings3<-as.data.frame(loadings(agoal.efa3)[,])
loadings3%>%
rownames_to_column("indicator") %>%
left_join(lt) %>%
mutate(indicator = factor(indicator, levels = paste("ags",12:1, sep =""))) %>%
gather(factor, value, -indicator, - latent_traits) %>%
mutate(value2 = ifelse(value < 0.1, NA,  value),
edge_colour = ifelse(is.na(value2), "white", "black"))-> loadings3.long
ggplot(data = loadings3.long) +
geom_point(aes(x = factor, y = indicator, fill = value2, shape = latent_traits, colour = edge_colour), size = 8) +
scale_colour_manual(values= c("white" = "white", "black" = "black"), guide = FALSE) +
scale_fill_gradient2(na.value = "white", mid = "blue", high = "red", low = "yellow",limits = c(-1,1.05)) +
scale_shape_manual(values = c("MAP" = 21, "MAV" = 22, "PAP" = 23, "PAV" = 24)) +
labs(fill = "Loading", shape = "Latent\ntrait") +
theme_classic()
agoal.efa3<-factanal(~ags1+ags2+ags3+ags4+ags5+ags6+ags7+ags8+ags9+ags10+ags11+ ags12, factors=3, rotation="promax", data = goal_scale, scores = "Bartlett")
efa_scores <- agoal.efa3$scores %>% as.data.frame() %>% rownames_to_column("obs") %>% na.omit()
set.seed(1234)
sub_efa_scores <- efa_scores[sample(25, replace = FALSE),]
a<- ggplot(data = sub_efa_scores) +
geom_point(aes(x = Factor1, y = Factor2), colour = "red", alpha = 0.5) +
geom_text_repel(aes(x = Factor1, y = Factor2, label = obs)) +
theme_classic()
b<- ggplot(data = sub_efa_scores) +
geom_point(aes(x = Factor2, y = Factor3), colour = "red", alpha = 0.5) +
geom_text_repel(aes(x = Factor2, y = Factor3, label = obs)) +
theme_classic()
c<- ggplot(data = sub_efa_scores) +
geom_point(aes(x = Factor1, y = Factor3), colour = "red", alpha = 0.5) +
geom_text_repel(aes(x = Factor1, y = Factor3, label = obs)) +
theme_classic()
grid.arrange(a,b,c, ncol = 3)
agoal.efa.4<-fa(goal_scale , nfactors=3, residuals=TRUE, rotate="promax",SMC=TRUE, fm="pa")
agoal.efa.4
corr_plot1<-ggcorr(data = NULL,
cor_matrix = as.data.frame(agoal.efa3$correlation),
palette = "RdGy",
label = TRUE,
label_round = 2,
label_size =4,
label_color = "black")
corr_plot1
goal_scale  %>%
na.omit() %>%
mutate_all(ordered) %>%
as.data.frame()-> goal_ordered
try(factanal(~ags1+ags2+ags3+ags4+ags5+ags6+ags7+ags8+ags9+ags10+ags11+ ags12, factors=3, rotation="promax", data = goal_ordered))
pc_goals<-hetcor(goal_ordered)
corr_plot2<-ggcorr(data = NULL,
cor_matrix = as.data.frame(pc_goals$correlation),
palette = "RdGy",
label = TRUE,
label_round = 2,
label_size =4,
label_color = "black")
grid.arrange(corr_plot1 + labs(title = "Nominal") + theme(plot.title = element_text(hjust = 1, size = 22)),
corr_plot2 + labs(title = "Ordinal") + theme(plot.title = element_text(hjust = 1, size = 22)),
ncol = 2)
agoal.efa.ordered<-fa(r=pc_goals$correlations,
nfactors=3,
residuals=TRUE, rotate="promax",SMC=TRUE, fm="pa")
agoal.efa.ordered
